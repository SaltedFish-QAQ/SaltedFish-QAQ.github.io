{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u5c0f\u54b8\u9c7c\u7684\u4e2a\u4ebawiki \u00b6 \u524d\u8a00 \u00b6 \u4e00\u8d77\u6765\u5077 bgg\u7684wiki \u5427 \u672cwiki\u7684\u7ec4\u4ef6\u4f9d\u6258\u4e8ebgg\u7684wiki\u9879\u76ee\uff0c\u611f\u8c22bgg\u7684\u65e0\u79c1\u5949\u732e\u3002 bgg\u7684\u9879\u76ee\u4e3alinux\u4e0b\u73af\u5883\uff0c\u6545\u672c\u4eba\u9f13\u6363\u7684\u65f6\u5019\u56f0\u96be\u91cd\u91cd\u3002\u6240\u4ee5\u5077\u4e86\u53e6\u4e00\u4e2a\u5927\u54e5\u7684wiki\uff0c\u6240\u4ee5windows\u73af\u5883\u4e0b\u7684\u6211\u4eec\u3002 \u4e00\u8d77\u7ec4\u961f\u5077 aWei\u7684wiki \u5427\u3002 \u5f85\u529e\u4e8b\u9879 \u00b6 \u4ee5\u4e0b\u6392\u540d\u533a\u5206\u4f18\u5148\u7ea7 \u611f\u8c22bgg\u548caWei\u7684\u5e2e\u52a9\uff0c\u540e\u7eed\u66f4\u65b0\u5982\u4f55\u4f7f\u7528mkdocs\u53cagithub\u7684pages\u53d1\u5e03wiki\uff0c\u4ee5\u9632\u6b62\u4ee5\u540e\u5fd8\u8bb0\u4e86\u3002\u5c31\u6682\u5b9a\u8fd9\u4e2a\u5468\u672b\u5427XD \u6574\u7406\u300a\u5168\u7403\u901a\u53f2\u76f8\u5173\u7b14\u8bb0\u300b \u5b66\u4e60uml+oopc \u66f4\u65b0rtt\u5b66\u4e60\u8fc7\u7a0b\uff0c\u6574\u7406\u4ece\u88f8\u673a\u5230os\u7684\u76f8\u5173\u5185\u5bb9 \u5b66\u4e60cortex-m3,m4\u5185\u6838\u6743\u5a01\u6307\u5357 esp8266 wifi\u534f\u8bae\u5b66\u4e60 linux\u5c1d\u8bd5\u6027\u5b66\u4e60 \u7ed3\u8bed \u00b6 \u543e\u751f\u4e5f\u6709\u6daf\uff0c\u800c\u77e5\u4e5f\u65e0\u6daf\u3002\u4ee5\u6709\u6daf\u968f\u65e0\u6daf\uff0c\u6b86\u5df2\uff01\u5df2\u800c\u4e3a\u77e5\u8005\uff0c\u6b86\u800c\u5df2\u77e3\uff01\u4e3a\u5584\u65e0\u8fd1\u540d\uff0c\u4e3a\u6076\u65e0\u8fd1\u5211\uff0c\u7f18\u7763\u4ee5\u4e3a\u7ecf\uff0c\u53ef\u4ee5\u4fdd\u8eab\uff0c\u53ef\u4ee5\u5168\u751f\uff0c\u53ef\u4ee5\u517b\u4eb2\uff0c\u53ef\u4ee5\u5c3d\u5e74\u3002","title":"\u6b22\u8fce\u6765\u5230\u5c0f\u54b8\u9c7c\u7684\u4e2a\u4ebawiki"},{"location":"#wiki","text":"","title":"\u6b22\u8fce\u6765\u5230\u5c0f\u54b8\u9c7c\u7684\u4e2a\u4ebawiki"},{"location":"#_1","text":"\u4e00\u8d77\u6765\u5077 bgg\u7684wiki \u5427 \u672cwiki\u7684\u7ec4\u4ef6\u4f9d\u6258\u4e8ebgg\u7684wiki\u9879\u76ee\uff0c\u611f\u8c22bgg\u7684\u65e0\u79c1\u5949\u732e\u3002 bgg\u7684\u9879\u76ee\u4e3alinux\u4e0b\u73af\u5883\uff0c\u6545\u672c\u4eba\u9f13\u6363\u7684\u65f6\u5019\u56f0\u96be\u91cd\u91cd\u3002\u6240\u4ee5\u5077\u4e86\u53e6\u4e00\u4e2a\u5927\u54e5\u7684wiki\uff0c\u6240\u4ee5windows\u73af\u5883\u4e0b\u7684\u6211\u4eec\u3002 \u4e00\u8d77\u7ec4\u961f\u5077 aWei\u7684wiki \u5427\u3002","title":"\u524d\u8a00"},{"location":"#_2","text":"\u4ee5\u4e0b\u6392\u540d\u533a\u5206\u4f18\u5148\u7ea7 \u611f\u8c22bgg\u548caWei\u7684\u5e2e\u52a9\uff0c\u540e\u7eed\u66f4\u65b0\u5982\u4f55\u4f7f\u7528mkdocs\u53cagithub\u7684pages\u53d1\u5e03wiki\uff0c\u4ee5\u9632\u6b62\u4ee5\u540e\u5fd8\u8bb0\u4e86\u3002\u5c31\u6682\u5b9a\u8fd9\u4e2a\u5468\u672b\u5427XD \u6574\u7406\u300a\u5168\u7403\u901a\u53f2\u76f8\u5173\u7b14\u8bb0\u300b \u5b66\u4e60uml+oopc \u66f4\u65b0rtt\u5b66\u4e60\u8fc7\u7a0b\uff0c\u6574\u7406\u4ece\u88f8\u673a\u5230os\u7684\u76f8\u5173\u5185\u5bb9 \u5b66\u4e60cortex-m3,m4\u5185\u6838\u6743\u5a01\u6307\u5357 esp8266 wifi\u534f\u8bae\u5b66\u4e60 linux\u5c1d\u8bd5\u6027\u5b66\u4e60","title":"\u5f85\u529e\u4e8b\u9879"},{"location":"#_3","text":"\u543e\u751f\u4e5f\u6709\u6daf\uff0c\u800c\u77e5\u4e5f\u65e0\u6daf\u3002\u4ee5\u6709\u6daf\u968f\u65e0\u6daf\uff0c\u6b86\u5df2\uff01\u5df2\u800c\u4e3a\u77e5\u8005\uff0c\u6b86\u800c\u5df2\u77e3\uff01\u4e3a\u5584\u65e0\u8fd1\u540d\uff0c\u4e3a\u6076\u65e0\u8fd1\u5211\uff0c\u7f18\u7763\u4ee5\u4e3a\u7ecf\uff0c\u53ef\u4ee5\u4fdd\u8eab\uff0c\u53ef\u4ee5\u5168\u751f\uff0c\u53ef\u4ee5\u517b\u4eb2\uff0c\u53ef\u4ee5\u5c3d\u5e74\u3002","title":"\u7ed3\u8bed"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","text":"\u8c01\u8bf4c\u8bed\u8a00\u4e0d\u80fd\u9762\u5411\u5bf9\u8c61 \u00b6 \u524d\u8a00\u9e2d \u00b6 \u8bed\u8a00\u5206\u4e3a\u4e24\u79cd\uff0c\u542c\u5f97\u61c2\u7684\u548c\u542c\u4e0d\u61c2\u7684\uff08\u4e0d\u662fXD\u3002\u662f\u9762\u5411\u5bf9\u8c61\u548c\u9762\u5411\u8fc7\u7a0b\uff0c\u800cc\u8bed\u8a00\u5219\u662f\u7ecf\u5178\u7684\u9762\u5411\u8fc7\u7a0b\u8bed\u8a00\u3002\u4f46\u7a76\u5176\u6839\u672c\uff0c\u9762\u5411\u8fc7\u7a0b\u4e5f\u597d\uff0c\u9762\u5411\u5bf9\u8c61\u4e5f\u7f62\u90fd\u662f\u4e00\u79cd\u601d\u60f3\u800c\u5df2\u3002\u90a3\u4e48\u65e2\u7136\u662f\u601d\u60f3\u5176\u5fc5\u7136\u548c\u6240\u5b9e\u73b0\u7684\u5de5\u5177\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u2026\u2026\u6211\u5c0f\u54b8\u9c7c\u4eca\u5929\u5c31\u662f\u8981\u7528\u52fa\u5b50\u5403\u9762\u6761\uff01XD \u95ee\u9898\u63cf\u8ff0 \u00b6 \u6700\u8fd1\u78b0\u5230\u4e86\u4e00\u4e2a\u6309\u952e\u68c0\u6d4b\u8f83\u591a\u7684\u9879\u76ee\uff0c\u5199\u5b8c\u4e4b\u540e\u5728\u524d\u53f0\u5904\u7406\u6a21\u5757\u51fa\u73b0\u4e86\u5927\u91cf\u7684\uff0c\u91cd\u590d\u6027\u4ee3\u7801\u3002\u540c\u6837\u7684\u6216\u8005\u7565\u5fae\u5dee\u5f02\u7684\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\uff0c\u540c\u6837\u7684\u5305\u542b\u4e86\u6ee4\u6ce2\uff0c\u4e0a\u4e0b\u8fb9\u6cbf\uff0c\u957f\u6309\uff0c\u6309\u4e0b\uff0c\u5f39\u8d77\u7b49\u68c0\u6d4b\u9879\u76ee\u3002\u800c\u5927\u540c\u5c0f\u5f02\u7684\u4ee3\u7801\u5374\u6709\u4e86\u4e00\u4e2a\u81f4\u547d\u7684\u5dee\u5f02\uff0c\u4e0d\u540c\u7684gpio\u7aef\u53e3\u53f7\u3002\u4e8e\u662f\u51fa\u73b0\u4e86\u2026\u2026\u4e00\u5768shit\uff08fuck\u3002\u800c\u6070\u5de7\uff0c\u672c\u4eba\u9886\u5bfc\u6709\u505a\u8fc7\u6309\u952e\u7684\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u6587\u4ef6\uff0c\u6211\u6709\u521a\u597d\u770b\u4e86\u70b9oopc\u3002\u4e8e\u662f\uff0clets do it\uff01 \u601d\u60f3\u63cf\u8ff0 \u00b6 \u6240\u6709\u7684\u6309\u952e\u90fd\u662f\u57fa\u4e8egpio\u68c0\u6d4b\u800c\u6765\u7684\uff0c\u800cgpio\u6240\u5177\u5907\u7684\u4e1c\u897f\u4e5f\u5c31\u90a3\u4e48\u51e0\u4e2a\uff1a\u7aef\u53e3\u53f7\uff0c\u7aef\u53e3\u72b6\u6001\uff0c\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\uff0c\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\u7b49\u4e0d\u4e00\u800c\u8db3\u3002\u4e8e\u662f\u5e94\u5f53\u5148\u58f0\u660e\u4e00\u6b4cgpio\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u58f0\u660e\u4e00\u4e2a\u6309\u952e\u5bf9\u8c61\uff0c\u8ba9\u5176\u5305\u542bgpio\u5bf9\u8c61\u3002\u4ee5\u6b64\u8fbe\u5230\u7ee7\u627f\u7684\u76ee\u7684\uff0c\uff08\u4e0d\u8981\u95ee\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5176\u4ed6\u7279\u6027\uff0c\u56e0\u4e3a\u6211\u83dc\u3002\u7531\u6b64\u800c\u5b9e\u73b0\u4e00\u4e2a\u4ee3\u7801\uff0c\u591a\u4e2a\u6309\u952e\u5171\u540c\u4f7f\u7528\u7684\u76ee\u7684\u3002 \u4ee3\u7801\u5c55\u793a \u00b6 talk is cheap\uff0cshow me the code\u3002 \u5148\u662f\u76f8\u5173\u7684gpio\u51fd\u6570\u6307\u9488\u58f0\u660e\uff0c\u53cagpio\u5bf9\u8c61\u58f0\u660e typedef uint8_t ( * ExterPort_Check )( ExterPortInPut ); //\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\u6307\u9488 typedef void ( * ExterPort_OutPut )( GPIO_PinEnum , FunctionalState ); //\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\u6307\u9488 typedef enum { lowlevel = 0 , //\u7aef\u53e3\u4f4e\u7535\u5e73 highlevel , } ExterPortState ; typedef struct ExterPortObject { ExterPortInPut exterPort ; //\u7aef\u53e3\u53f7 ExterPort_Check exterPort_Check ; //\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570 ExterPort_OutPut exterPort_outPut ; //\u7aef\u53e3\u8f93\u51fa\u51fd\u6570 ExterPortState state ; //\u7aef\u53e3\u72b6\u6001 } ExterPortObject ; //\u5bf9\u8c61\u540d \u7136\u540e\u662f\u6309\u952e\u5bf9\u8c61\u53ca\u5176\u76f8\u5173\u58f0\u660e typedef enum { fallingedge , //\u4e0b\u964d\u6cbf risingedge , //\u4e0a\u5347\u6cbf longpress , //\u957f\u6309 press , //\u6309\u4e0b nopress , //\u5f39\u8d77 } KeyState ; typedef struct KeyObject { ExterPortObject exterPortObject ; //gpio\u5bf9\u8c61 KeyState state ; //\u6309\u952e\u72b6\u6001 uint16_t pressTimer ; //\u6309\u952e\u5b9a\u65f6\u5668 uint16_t longPressDelay ; //\u6309\u952e\u957f\u5ef6\u65f6 } KeyObject ; \u7136\u540e\u5c31\u662f\u76f8\u5173\u51fd\u6570\u5566 #define KEYLONGPRESSTIME 700 //\u957f\u6309\u5ef6\u65f6 #define SAMPLINGTIMES 20 //\u6ee4\u6ce2\u6b21\u6570 #define MINQUALIFIEDTIMES 15 //\u6700\u5c0f\u6ee4\u6ce2\u5408\u683c\u6b21\u6570 void ExterPortObject_Init ( ExterPortObject * pobj , ExterPortInPut port ); void KeyObject_Init ( KeyObject * pobj , ExterPortInPut port ); void ExterPortObject_Init ( ExterPortObject * pobj , ExterPortInPut port ) { pobj -> exterPort = port ; //\u521d\u59cb\u5316gpio\u7aef\u53e3 pobj -> exterPort_Check = ExterPort_GetInPutLevel ; //\u5b58\u5165\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570 pobj -> exterPort_outPut = ExterPort_SetFault ; //\u5b58\u5165\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7531\u5916\u90e8\u5b9e\u73b0\u3002 pobj -> state = highlevel ; //\u521d\u59cb\u5316\u7aef\u53e3\u7535\u5e73\uff0c\u672c\u9879\u76ee\u7a7a\u95f2\u72b6\u6001\u4e3a\u9ad8\u7535\u5e73 } void KeyObject_Init ( KeyObject * pobj , ExterPortInPut port ) { ExterPortObject_Init ( & ( pobj -> exterPortObject ), port ); //\u521d\u59cb\u5316gpio\u5bf9\u8c61 pobj -> state = nopress ; //\u521d\u59cb\u5316\u6309\u952e\u72b6\u6001 pobj -> pressTimer = 0 ; //\u521d\u59cb\u5316\u6309\u952e\u5b9a\u65f6\u5668 pobj -> longPressDelay = KEYLONGPRESSTIME ; //\u521d\u59cb\u5316\u957f\u6309\u5ef6\u65f6 } static ExterPortState ExterPortObject_GetState ( ExterPortObject * pobj ); //\u672c\u51fd\u6570\u4f7f\u7528\u7684\u6ee4\u6ce2\u529f\u80fd\u6709\u9650\uff0c\u4ec5\u4ec5\u53ea\u80fd\u6ee4\u6389\u9ad8\u9891\u90e8\u5206\u800c\u4f4e\u9891\u6296\u52a8\u65e0\u80fd\u4e3a\u529b\uff0c\u5c1a\u5f85\u66f4\u6539\u3002\u5982\u679c\u6ca1\u6709\u66f4\u6539\uff0c\u6211\u83dc\uff0c\u6211\u61d2 static ExterPortState ExterPortObject_GetState ( ExterPortObject * pobj ) { ExterPortState state = highlevel ; uint8_t times = 0 ; for ( int i = 0 ; i < SAMPLINGTIMES ; i ++ ) //\u8fde\u7eed\u68c0\u6d4b20\u6b21gpio\u7535\u5e73 { if ( ! pobj -> exterPort_Check ( pobj -> exterPort )) { times ++ ; } } if ( times >= MINQUALIFIEDTIMES ) //\u5f53\u5408\u683c\u6b21\u6570\u5927\u4e8e15\u6b21\u65f6\u8ba4\u4e3a\u68c0\u6d4b\u6210\u529f { state = lowlevel ; } else { state = highlevel ; } return state ; //\u8fd4\u56de\u68c0\u6d4b\u7535\u5e73 } void KeyScanInput ( KeyObject * pobj ); void KeyScanInput ( KeyObject * pobj ) { ExterPortState currentPortLevel = highlevel ; currentPortLevel = ExterPortObject_GetState ( & ( pobj -> exterPortObject )); //\u68c0\u6d4b\u6309\u952e\u7535\u5e73 if ( currentPortLevel != pobj -> exterPortObject . state ) //\u5f53\u5f53\u524d\u68c0\u6d4b\u7535\u5e73\u4e0d\u7b49\u4e8e\u539f\u7535\u5e73\u65f6\uff0c\u5f00\u59cb\u8fdb\u884c\u4e0a\u4e0b\u8fb9\u6cbf\u5224\u65ad { if ( pobj -> exterPortObject . state == highlevel ) //\u56e0\u672c\u9879\u76ee\u5e38\u6001\u4e3a\u9ad8\u7535\u5e73\uff0c\u6240\u4ee5\u6b64\u5904\u4e3a\u4e0b\u964d\u6cbf\u3002\u5373\u6309\u952e\u4e0b\u964d\u8fb9\u6cbf { pobj -> state = fallingedge ; } else if ( pobj -> exterPortObject . state == lowlevel ) { pobj -> state = risingedge ; } pobj -> exterPortObject . state = currentPortLevel ; return ; } if ( pobj -> exterPortObject . state == lowlevel ) //\u6309\u4e0b\u65f6\u8fdb\u884c\u6309\u952e\u5ef6\u65f6\u5373\u53ef { pobj -> state = press ; pobj -> pressTimer ++ ; } else if ( pobj -> exterPortObject . state == highlevel ) { pobj -> state = nopress ; pobj -> pressTimer = 0 ; } if ( pobj -> pressTimer >= pobj -> longPressDelay ) //\u5f53\u6309\u952e\u5b9a\u65f6\u5668\u503c\u8fbe\u5230\u957f\u6309\u5ef6\u65f6\u65f6\uff0c\u8bbe\u7f6e\u4e3a\u957f\u6309\u72b6\u6001 { pobj -> state = longpress ; pobj -> pressTimer = 0 ; } } \u5982\u4f55\u4f7f\u7528 //\u5148\u58f0\u660e KeyObject gStopKeyCheck ; KeyObject gRun1KeyCheck ; KeyObject gRun2KeyCheck ; KeyObject gAlarmSignalCheck ; KeyObject gPauseSignalCheck ; KeyObject gPauseSignalGenerate ; //\u518d\u521d\u59cb\u5316 KeyObject_Init ( & gRun1KeyCheck , Port_X0 ); KeyObject_Init ( & gRun2KeyCheck , Port_X1 ); KeyObject_Init ( & gStopKeyCheck , Port_X2 ); KeyObject_Init ( & gAlarmSignalCheck , Port_X3 ); KeyObject_Init ( & gPauseSignalCheck , Port_X4 ); KeyObject_Init ( & gPauseSignalGenerate , ( ExterPortInPut ) EXTER_PORT_Y0 ); //\u7136\u540e\u5468\u671f\u6027\u7684\u8c03\u7528\u626b\u63cf\u51fd\u6570\u5373\u53ef KeyScanInput ( & gRun1KeyCheck ); KeyScanInput ( & gRun2KeyCheck ); KeyScanInput ( & gStopKeyCheck ); KeyScanInput ( & gAlarmSignalCheck ); KeyScanInput ( & gPauseSignalCheck ); //\u4f9d\u636e\u5bf9\u5e94\u7684\u6309\u952e\u72b6\u6001\u8fdb\u884c\u529f\u80fd\u5b9e\u73b0 if ( gStopKeyCheck . state == longpress ) { return Motor_ClearLapCount ; } if ( gStopKeyCheck . state == fallingedge ) { // printf(\"stop mode\\n\"); return Motor_StopMode ; //\u505c\u673a\u72b6\u6001 } if ( gRun2KeyCheck . state == fallingedge ) { // printf(\"start mode 2\\n\"); return Motor_StartMode2 ; //\u542f\u52a8\u6a21\u5f0f2 } else if ( gRun1KeyCheck . state == fallingedge ) { // printf(\"start mode 1\\n\"); return Motor_StartMode1 ; //\u542f\u52a8\u6a21\u5f0f1 } \u7ed3\u8bed \u00b6 \u672c\u6b21\u4e3b\u8981\u63a2\u7d22\u53ef\u4ee5\u4f7f\u7528\u67d0\u79cd\u65b9\u5f0f\u8fbe\u5230\u9762\u5411\u5bf9\u8c61\u7684\u67d0\u4e9b\u5730\u6b65\uff0c\u4f46\u4f9d\u7136\u5f88\u6709\u9650\u3002\u4e5f\u53ea\u662f\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u6361\u77f3\u5934\u7f62\u4e86\uff0c\u4f46\u79c1\u4ee5\u4e3a\u65e2\u7136\u662f\u4e00\u6b21\u503c\u5f97\u8bb0\u4e0b\u6765\u7684\u4e8b\u60c5\u3002\u9042\u6709\u6b64\u7bc7\uff0c\u597d\u4e86\u8bf4\u4e86\u8fd9\u4e48\u591a\u5bf9\u8c61\uff0c\u5e0c\u671b\u5927\u4f19\u90fd\u6709\u5bf9\u8c61\u3002","title":"\u8c01\u8bf4c\u8bed\u8a00\u4e0d\u80fd\u9762\u5411\u5bf9\u8c61"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#c","text":"","title":"\u8c01\u8bf4c\u8bed\u8a00\u4e0d\u80fd\u9762\u5411\u5bf9\u8c61"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_1","text":"\u8bed\u8a00\u5206\u4e3a\u4e24\u79cd\uff0c\u542c\u5f97\u61c2\u7684\u548c\u542c\u4e0d\u61c2\u7684\uff08\u4e0d\u662fXD\u3002\u662f\u9762\u5411\u5bf9\u8c61\u548c\u9762\u5411\u8fc7\u7a0b\uff0c\u800cc\u8bed\u8a00\u5219\u662f\u7ecf\u5178\u7684\u9762\u5411\u8fc7\u7a0b\u8bed\u8a00\u3002\u4f46\u7a76\u5176\u6839\u672c\uff0c\u9762\u5411\u8fc7\u7a0b\u4e5f\u597d\uff0c\u9762\u5411\u5bf9\u8c61\u4e5f\u7f62\u90fd\u662f\u4e00\u79cd\u601d\u60f3\u800c\u5df2\u3002\u90a3\u4e48\u65e2\u7136\u662f\u601d\u60f3\u5176\u5fc5\u7136\u548c\u6240\u5b9e\u73b0\u7684\u5de5\u5177\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u2026\u2026\u6211\u5c0f\u54b8\u9c7c\u4eca\u5929\u5c31\u662f\u8981\u7528\u52fa\u5b50\u5403\u9762\u6761\uff01XD","title":"\u524d\u8a00\u9e2d"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_2","text":"\u6700\u8fd1\u78b0\u5230\u4e86\u4e00\u4e2a\u6309\u952e\u68c0\u6d4b\u8f83\u591a\u7684\u9879\u76ee\uff0c\u5199\u5b8c\u4e4b\u540e\u5728\u524d\u53f0\u5904\u7406\u6a21\u5757\u51fa\u73b0\u4e86\u5927\u91cf\u7684\uff0c\u91cd\u590d\u6027\u4ee3\u7801\u3002\u540c\u6837\u7684\u6216\u8005\u7565\u5fae\u5dee\u5f02\u7684\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\uff0c\u540c\u6837\u7684\u5305\u542b\u4e86\u6ee4\u6ce2\uff0c\u4e0a\u4e0b\u8fb9\u6cbf\uff0c\u957f\u6309\uff0c\u6309\u4e0b\uff0c\u5f39\u8d77\u7b49\u68c0\u6d4b\u9879\u76ee\u3002\u800c\u5927\u540c\u5c0f\u5f02\u7684\u4ee3\u7801\u5374\u6709\u4e86\u4e00\u4e2a\u81f4\u547d\u7684\u5dee\u5f02\uff0c\u4e0d\u540c\u7684gpio\u7aef\u53e3\u53f7\u3002\u4e8e\u662f\u51fa\u73b0\u4e86\u2026\u2026\u4e00\u5768shit\uff08fuck\u3002\u800c\u6070\u5de7\uff0c\u672c\u4eba\u9886\u5bfc\u6709\u505a\u8fc7\u6309\u952e\u7684\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u6587\u4ef6\uff0c\u6211\u6709\u521a\u597d\u770b\u4e86\u70b9oopc\u3002\u4e8e\u662f\uff0clets do it\uff01","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_3","text":"\u6240\u6709\u7684\u6309\u952e\u90fd\u662f\u57fa\u4e8egpio\u68c0\u6d4b\u800c\u6765\u7684\uff0c\u800cgpio\u6240\u5177\u5907\u7684\u4e1c\u897f\u4e5f\u5c31\u90a3\u4e48\u51e0\u4e2a\uff1a\u7aef\u53e3\u53f7\uff0c\u7aef\u53e3\u72b6\u6001\uff0c\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\uff0c\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\u7b49\u4e0d\u4e00\u800c\u8db3\u3002\u4e8e\u662f\u5e94\u5f53\u5148\u58f0\u660e\u4e00\u6b4cgpio\u5bf9\u8c61\uff0c\u7136\u540e\u518d\u58f0\u660e\u4e00\u4e2a\u6309\u952e\u5bf9\u8c61\uff0c\u8ba9\u5176\u5305\u542bgpio\u5bf9\u8c61\u3002\u4ee5\u6b64\u8fbe\u5230\u7ee7\u627f\u7684\u76ee\u7684\uff0c\uff08\u4e0d\u8981\u95ee\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5176\u4ed6\u7279\u6027\uff0c\u56e0\u4e3a\u6211\u83dc\u3002\u7531\u6b64\u800c\u5b9e\u73b0\u4e00\u4e2a\u4ee3\u7801\uff0c\u591a\u4e2a\u6309\u952e\u5171\u540c\u4f7f\u7528\u7684\u76ee\u7684\u3002","title":"\u601d\u60f3\u63cf\u8ff0"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_4","text":"talk is cheap\uff0cshow me the code\u3002 \u5148\u662f\u76f8\u5173\u7684gpio\u51fd\u6570\u6307\u9488\u58f0\u660e\uff0c\u53cagpio\u5bf9\u8c61\u58f0\u660e typedef uint8_t ( * ExterPort_Check )( ExterPortInPut ); //\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570\u6307\u9488 typedef void ( * ExterPort_OutPut )( GPIO_PinEnum , FunctionalState ); //\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\u6307\u9488 typedef enum { lowlevel = 0 , //\u7aef\u53e3\u4f4e\u7535\u5e73 highlevel , } ExterPortState ; typedef struct ExterPortObject { ExterPortInPut exterPort ; //\u7aef\u53e3\u53f7 ExterPort_Check exterPort_Check ; //\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570 ExterPort_OutPut exterPort_outPut ; //\u7aef\u53e3\u8f93\u51fa\u51fd\u6570 ExterPortState state ; //\u7aef\u53e3\u72b6\u6001 } ExterPortObject ; //\u5bf9\u8c61\u540d \u7136\u540e\u662f\u6309\u952e\u5bf9\u8c61\u53ca\u5176\u76f8\u5173\u58f0\u660e typedef enum { fallingedge , //\u4e0b\u964d\u6cbf risingedge , //\u4e0a\u5347\u6cbf longpress , //\u957f\u6309 press , //\u6309\u4e0b nopress , //\u5f39\u8d77 } KeyState ; typedef struct KeyObject { ExterPortObject exterPortObject ; //gpio\u5bf9\u8c61 KeyState state ; //\u6309\u952e\u72b6\u6001 uint16_t pressTimer ; //\u6309\u952e\u5b9a\u65f6\u5668 uint16_t longPressDelay ; //\u6309\u952e\u957f\u5ef6\u65f6 } KeyObject ; \u7136\u540e\u5c31\u662f\u76f8\u5173\u51fd\u6570\u5566 #define KEYLONGPRESSTIME 700 //\u957f\u6309\u5ef6\u65f6 #define SAMPLINGTIMES 20 //\u6ee4\u6ce2\u6b21\u6570 #define MINQUALIFIEDTIMES 15 //\u6700\u5c0f\u6ee4\u6ce2\u5408\u683c\u6b21\u6570 void ExterPortObject_Init ( ExterPortObject * pobj , ExterPortInPut port ); void KeyObject_Init ( KeyObject * pobj , ExterPortInPut port ); void ExterPortObject_Init ( ExterPortObject * pobj , ExterPortInPut port ) { pobj -> exterPort = port ; //\u521d\u59cb\u5316gpio\u7aef\u53e3 pobj -> exterPort_Check = ExterPort_GetInPutLevel ; //\u5b58\u5165\u7aef\u53e3\u68c0\u6d4b\u51fd\u6570 pobj -> exterPort_outPut = ExterPort_SetFault ; //\u5b58\u5165\u7aef\u53e3\u8f93\u51fa\u51fd\u6570\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7531\u5916\u90e8\u5b9e\u73b0\u3002 pobj -> state = highlevel ; //\u521d\u59cb\u5316\u7aef\u53e3\u7535\u5e73\uff0c\u672c\u9879\u76ee\u7a7a\u95f2\u72b6\u6001\u4e3a\u9ad8\u7535\u5e73 } void KeyObject_Init ( KeyObject * pobj , ExterPortInPut port ) { ExterPortObject_Init ( & ( pobj -> exterPortObject ), port ); //\u521d\u59cb\u5316gpio\u5bf9\u8c61 pobj -> state = nopress ; //\u521d\u59cb\u5316\u6309\u952e\u72b6\u6001 pobj -> pressTimer = 0 ; //\u521d\u59cb\u5316\u6309\u952e\u5b9a\u65f6\u5668 pobj -> longPressDelay = KEYLONGPRESSTIME ; //\u521d\u59cb\u5316\u957f\u6309\u5ef6\u65f6 } static ExterPortState ExterPortObject_GetState ( ExterPortObject * pobj ); //\u672c\u51fd\u6570\u4f7f\u7528\u7684\u6ee4\u6ce2\u529f\u80fd\u6709\u9650\uff0c\u4ec5\u4ec5\u53ea\u80fd\u6ee4\u6389\u9ad8\u9891\u90e8\u5206\u800c\u4f4e\u9891\u6296\u52a8\u65e0\u80fd\u4e3a\u529b\uff0c\u5c1a\u5f85\u66f4\u6539\u3002\u5982\u679c\u6ca1\u6709\u66f4\u6539\uff0c\u6211\u83dc\uff0c\u6211\u61d2 static ExterPortState ExterPortObject_GetState ( ExterPortObject * pobj ) { ExterPortState state = highlevel ; uint8_t times = 0 ; for ( int i = 0 ; i < SAMPLINGTIMES ; i ++ ) //\u8fde\u7eed\u68c0\u6d4b20\u6b21gpio\u7535\u5e73 { if ( ! pobj -> exterPort_Check ( pobj -> exterPort )) { times ++ ; } } if ( times >= MINQUALIFIEDTIMES ) //\u5f53\u5408\u683c\u6b21\u6570\u5927\u4e8e15\u6b21\u65f6\u8ba4\u4e3a\u68c0\u6d4b\u6210\u529f { state = lowlevel ; } else { state = highlevel ; } return state ; //\u8fd4\u56de\u68c0\u6d4b\u7535\u5e73 } void KeyScanInput ( KeyObject * pobj ); void KeyScanInput ( KeyObject * pobj ) { ExterPortState currentPortLevel = highlevel ; currentPortLevel = ExterPortObject_GetState ( & ( pobj -> exterPortObject )); //\u68c0\u6d4b\u6309\u952e\u7535\u5e73 if ( currentPortLevel != pobj -> exterPortObject . state ) //\u5f53\u5f53\u524d\u68c0\u6d4b\u7535\u5e73\u4e0d\u7b49\u4e8e\u539f\u7535\u5e73\u65f6\uff0c\u5f00\u59cb\u8fdb\u884c\u4e0a\u4e0b\u8fb9\u6cbf\u5224\u65ad { if ( pobj -> exterPortObject . state == highlevel ) //\u56e0\u672c\u9879\u76ee\u5e38\u6001\u4e3a\u9ad8\u7535\u5e73\uff0c\u6240\u4ee5\u6b64\u5904\u4e3a\u4e0b\u964d\u6cbf\u3002\u5373\u6309\u952e\u4e0b\u964d\u8fb9\u6cbf { pobj -> state = fallingedge ; } else if ( pobj -> exterPortObject . state == lowlevel ) { pobj -> state = risingedge ; } pobj -> exterPortObject . state = currentPortLevel ; return ; } if ( pobj -> exterPortObject . state == lowlevel ) //\u6309\u4e0b\u65f6\u8fdb\u884c\u6309\u952e\u5ef6\u65f6\u5373\u53ef { pobj -> state = press ; pobj -> pressTimer ++ ; } else if ( pobj -> exterPortObject . state == highlevel ) { pobj -> state = nopress ; pobj -> pressTimer = 0 ; } if ( pobj -> pressTimer >= pobj -> longPressDelay ) //\u5f53\u6309\u952e\u5b9a\u65f6\u5668\u503c\u8fbe\u5230\u957f\u6309\u5ef6\u65f6\u65f6\uff0c\u8bbe\u7f6e\u4e3a\u957f\u6309\u72b6\u6001 { pobj -> state = longpress ; pobj -> pressTimer = 0 ; } } \u5982\u4f55\u4f7f\u7528 //\u5148\u58f0\u660e KeyObject gStopKeyCheck ; KeyObject gRun1KeyCheck ; KeyObject gRun2KeyCheck ; KeyObject gAlarmSignalCheck ; KeyObject gPauseSignalCheck ; KeyObject gPauseSignalGenerate ; //\u518d\u521d\u59cb\u5316 KeyObject_Init ( & gRun1KeyCheck , Port_X0 ); KeyObject_Init ( & gRun2KeyCheck , Port_X1 ); KeyObject_Init ( & gStopKeyCheck , Port_X2 ); KeyObject_Init ( & gAlarmSignalCheck , Port_X3 ); KeyObject_Init ( & gPauseSignalCheck , Port_X4 ); KeyObject_Init ( & gPauseSignalGenerate , ( ExterPortInPut ) EXTER_PORT_Y0 ); //\u7136\u540e\u5468\u671f\u6027\u7684\u8c03\u7528\u626b\u63cf\u51fd\u6570\u5373\u53ef KeyScanInput ( & gRun1KeyCheck ); KeyScanInput ( & gRun2KeyCheck ); KeyScanInput ( & gStopKeyCheck ); KeyScanInput ( & gAlarmSignalCheck ); KeyScanInput ( & gPauseSignalCheck ); //\u4f9d\u636e\u5bf9\u5e94\u7684\u6309\u952e\u72b6\u6001\u8fdb\u884c\u529f\u80fd\u5b9e\u73b0 if ( gStopKeyCheck . state == longpress ) { return Motor_ClearLapCount ; } if ( gStopKeyCheck . state == fallingedge ) { // printf(\"stop mode\\n\"); return Motor_StopMode ; //\u505c\u673a\u72b6\u6001 } if ( gRun2KeyCheck . state == fallingedge ) { // printf(\"start mode 2\\n\"); return Motor_StartMode2 ; //\u542f\u52a8\u6a21\u5f0f2 } else if ( gRun1KeyCheck . state == fallingedge ) { // printf(\"start mode 1\\n\"); return Motor_StartMode1 ; //\u542f\u52a8\u6a21\u5f0f1 }","title":"\u4ee3\u7801\u5c55\u793a"},{"location":"%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%80%E5%88%87/%E8%B0%81%E8%AF%B4c%E8%AF%AD%E8%A8%80%E4%B8%8D%E8%83%BD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_5","text":"\u672c\u6b21\u4e3b\u8981\u63a2\u7d22\u53ef\u4ee5\u4f7f\u7528\u67d0\u79cd\u65b9\u5f0f\u8fbe\u5230\u9762\u5411\u5bf9\u8c61\u7684\u67d0\u4e9b\u5730\u6b65\uff0c\u4f46\u4f9d\u7136\u5f88\u6709\u9650\u3002\u4e5f\u53ea\u662f\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\u6361\u77f3\u5934\u7f62\u4e86\uff0c\u4f46\u79c1\u4ee5\u4e3a\u65e2\u7136\u662f\u4e00\u6b21\u503c\u5f97\u8bb0\u4e0b\u6765\u7684\u4e8b\u60c5\u3002\u9042\u6709\u6b64\u7bc7\uff0c\u597d\u4e86\u8bf4\u4e86\u8fd9\u4e48\u591a\u5bf9\u8c61\uff0c\u5e0c\u671b\u5927\u4f19\u90fd\u6709\u5bf9\u8c61\u3002","title":"\u7ed3\u8bed"}]}